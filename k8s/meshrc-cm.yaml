apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: meshrc-cm
data:
  initOtg.sh: |-
    #!/bin/bash
    while true; do
      openapi-to-graphql http://mesh-svc:8001/openapi/v2 -uhttp://mesh-svc:8001/ --no-viewer
    done
  init.sh: |-
    #!/bin/bash
    while true; do
      yarn mesh dev && break
    done
  .meshrc.yaml: |-
    sources:
    - name: graphqlMeshK8s
      handler:
        graphql:
          endpoint: http://mesh-svc:3000/graphql
      transforms:
        - rename:
            mode: wrap
            renames:
            - from:
                type: IoK8sApiCoreV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiAppsV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiNetworkingV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiStorageV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiRbacV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiCertificatesV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: IoK8sApiPolicyV1(.*)
              to: 
                type: $1
              useRegExpForTypes: true
            - from:
                type: Query
                field: ioK8sApiCoreV1Pod
              to: 
                type: Query
                field: Pod
            - from:
                type: Query
                field: ioK8sApiCoreV1PodList
              to: 
                type: Query
                field: Pods
            - from:
                type: Query
                field: ioK8sApiCoreV1Namespace
              to:
                type: Query
                field: Namespace
            - from: 
                type: Query
                field: ioK8sApiCoreV1NamespaceList
              to:
                type: Query
                field: Namespaces
            - from:
                type: Query
                field: ioK8sApiCoreV1Node
              to:
                type: Query
                field: Node
            - from: 
                type: Query
                field: ioK8sApiCoreV1NodeList
              to:
                type: Query
                field: Nodes
            - from: 
                type: Query
                field: ioK8sApiRbacV1ClusterRoleBinding
              to:
                type: Query
                field: ClusterRoleBinding
            - from: 
                type: Query
                field: ioK8sApiRbacV1ClusterRoleBindingList
              to:
                type: Query
                field: ClusterRoleBindings
            - from: 
                type: Query
                field: ioK8sApiRbacV1ClusterRole
              to:
                type: Query
                field: ClusterRole
            - from: 
                type: Query
                field: ioK8sApiRbacV1ClusterRoleList
              to:
                type: Query
                field: ClusterRoles
            - from: 
                type: Query
                field: ioK8sApiStorageV1StorageClass
              to:
                type: Query
                field: StorageClass
            - from: 
                type: Query
                field: ioK8sApiStorageV1StorageClassList
              to:
                type: Query
                field: StorageClasses
            - from: 
                type: Query
                field: ioK8sApiAdmissionregistrationV1MutatingWebhookConfiguration
              to:
                type: Query
                field: MutatingWebhookConfiguration
            - from: 
                type: Query
                field: ioK8sApiAdmissionregistrationV1MutatingWebhookConfigurationList
              to:
                type: Query
                field: MutatingWebhookConfigurations
            - from: 
                type: Query
                field: ioK8sApiAdmissionregistrationV1ValidatingWebhookConfiguration
              to:
                type: Query
                field: ValidatingWebhookConfiguration
            - from: 
                type: Query
                field: ioK8sApiAdmissionregistrationV1ValidatingWebhookConfigurationList
              to:
                type: Query
                field: ValidatingWebhookConfigurations
            - from: 
                type: Query
                field: ioK8sApiCertificatesV1beta1CertificateSigningRequest
              to:
                type: Query
                field: CertificateSigningRequest
            - from: 
                type: Query
                field: ioK8sApiCertificatesV1beta1CertificateSigningRequestList
              to:
                type: Query
                field: CertificateSigningRequests
            - from: 
                type: Query
                field: ioK8sApiPolicyV1beta1PodSecurityPolicy
              to:
                type: Query
                field: PodSecurityPolicy
            - from: 
                type: Query
                field: ioK8sApiPolicyV1beta1PodSecurityPolicyList
              to:
                type: Query
                field: PodSecurityPolicys
            - from: 
                type: Query
                field: ioK8sApiCoreV1ComponentStatus
              to:
                type: Query
                field: ComponentStatus
            - from: 
                type: Query
                field: ioK8sApiCoreV1ComponentStatusList
              to:
                type: Query
                field: ComponentStatuses
            - from: 
                type: Query
                field: ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition
              to:
                type: Query
                field: CustomResourceDefinition
            - from: 
                type: Query
                field: ioK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList
              to:
                type: Query
                field: CustomResourceDefinitions
            - from: 
                type: Query
                field: ioK8sApiSchedulingV1PriorityClass
              to:
                type: Query
                field: PriorityClass
            - from: 
                type: Query
                field: ioK8sApiSchedulingV1PriorityClassList
              to:
                type: Query
                field: PriorityClasses
            - from: 
                type: Query
                field: ioK8sApiStorageV1CSIDriver
              to:
                type: Query
                field: CSIDriver
            - from: 
                type: Query
                field: ioK8sApiStorageV1CSIDriverList
              to:
                type: Query
                field: CSIDrivers
            - from: 
                type: Query
                field: ioK8sApiStorageV1CSINode
              to:
                type: Query
                field: CSINode
            - from: 
                type: Query
                field: ioK8sApiStorageV1CSINodeList
              to:
                type: Query
                field: CSINodes
            - from: 
                type: Query
                field: ioK8sApiStorageV1VolumeAttachment
              to:
                type: Query
                field: VolumeAttachment
            - from: 
                type: Query
                field: ioK8sApiStorageV1VolumeAttachmentList
              to:
                type: Query
                field: VolumeAttachments
            - from: 
                type: Query
                field: ioK8sApiCoreV1Pod
              to:
                type: Query
                field: Pod
            - from: 
                type: Query
                field: ioK8sApiCoreV1Service
              to:
                type: Query
                field: Service
            - from: 
                type: Query
                field: ioK8sApiCoreV1ServiceList
              to:
                type: Query
                field: Services
            - from: 
                type: Query
                field: ioK8sApiNetworkingV1beta1Ingress
              to:
                type: Query
                field: Ingress
            - from: 
                type: Query
                field: ioK8sApiNetworkingV1beta1IngressList
              to:
                type: Query
                field: Ingresses
            - from: 
                type: Query
                field: ioK8sApiAppsV1ReplicaSet
              to:
                type: Query
                field: ReplicaSet
            - from: 
                type: Query
                field: ioK8sApiAppsV1ReplicaSetList
              to:
                type: Query
                field: ReplicaSets
            - from: 
                type: Query
                field: ioK8sApiAppsV1Deployment
              to:
                type: Query
                field: Deployment
            - from: 
                type: Query
                field: ioK8sApiAppsV1DeploymentList
              to:
                type: Query
                field: Deployments
            - from: 
                type: Query
                field: ioK8sApiAppsV1DaemonSet
              to:
                type: Query
                field: DaemonSet
            - from: 
                type: Query
                field: ioK8sApiAppsV1DaemonSetList
              to:
                type: Query
                field: DaemonSets
            - from: 
                type: Query
                field: ioK8sApiAppsV1StatefulSet
              to:
                type: Query
                field: StatefulSet
            - from: 
                type: Query
                field: ioK8sApiAppsV1StatefulSetList
              to:
                type: Query
                field: StatefulSets
            - from: 
                type: Query
                field: ioK8sApiCoreV1ReplicationController
              to:
                type: Query
                field: ReplicationController
            - from: 
                type: Query
                field: ioK8sApiCoreV1ReplicationControllerList
              to:
                type: Query
                field: ReplicationControllers
            - from: 
                type: Query
                field: ioK8sApiAutoscalingV1HorizontalPodAutoscaler
              to:
                type: Query
                field: HorizontalPodAutoscaler
            - from: 
                type: Query
                field: ioK8sApiAutoscalingV1HorizontalPodAutoscalerList
              to:
                type: Query
                field: HorizontalPodAutoscalers
            - from: 
                type: Query
                field: ioK8sApiBatchV1beta1CronJob
              to:
                type: Query
                field: CronJob
            - from: 
                type: Query
                field: ioK8sApiBatchV1beta1CronJobList
              to:
                type: Query
                field: CronJobs
            - from: 
                type: Query
                field: ioK8sApiBatchV1Job
              to:
                type: Query
                field: Job
            - from: 
                type: Query
                field: ioK8sApiBatchV1JobList
              to:
                type: Query
                field: Jobs
            - from: 
                type: Query
                field: ioK8sApiRbacV1RoleBinding
              to:
                type: Query
                field: RoleBinding
            - from: 
                type: Query
                field: ioK8sApiRbacV1RoleBindingList
              to:
                type: Query
                field: RoleBindings
            - from: 
                type: Query
                field: ioK8sApiRbacV1Role
              to:
                type: Query
                field: Role
            - from: 
                type: Query
                field: ioK8sApiRbacV1RoleList
              to:
                type: Query
                field: Roles
            - from: 
                type: Query
                field: ioK8sApiCoreV1ServiceAccount
              to:
                type: Query
                field: ServiceAccount
            - from: 
                type: Query
                field: ioK8sApiCoreV1ServiceAccountList
              to:
                type: Query
                field: ServiceAccounts
            - from: 
                type: Query
                field: ioK8sApiCoreV1ResourceQuota
              to:
                type: Query
                field: ResourceQuota
            - from: 
                type: Query
                field: ioK8sApiCoreV1ResourceQuotaList
              to:
                type: Query
                field: ResourceQuotas
            - from: 
                type: Query
                field: ioK8sApiCoreV1Endpoints
              to:
                type: Query
                field: Endpoints
            - from: 
                type: Query
                field: ioK8sApiCoreV1EndpointsList
              to:
                type: Query
                field: EndpointsList
            - from: 
                type: Query
                field: ioK8sApiAppsV1ControllerRevision
              to:
                type: Query
                field: ControllerRevision
            - from: 
                type: Query
                field: ioK8sApiAppsV1ControllerRevisionList
              to:
                type: Query
                field: ControllerRevisions
            - from: 
                type: Query
                field: ioK8sApiNetworkingV1NetworkPolicy
              to:
                type: Query
                field: NetworkPolicy
            - from: 
                type: Query
                field: ioK8sApiNetworkingV1NetworkPolicyList
              to:
                type: Query
                field: NetworkPolicys
            - from: 
                type: Query
                field: ioK8sApiPolicyV1beta1PodDisruptionBudget
              to:
                type: Query
                field: PodDisruptionBudget
            - from: 
                type: Query
                field: ioK8sApiPolicyV1beta1PodDisruptionBudgetList
              to:
                type: Query
                field: PodDisruptionBudgets
            - from: 
                type: Query
                field: ioK8sApiCoreV1LimitRange
              to:
                type: Query
                field: LimitRange
            - from: 
                type: Query
                field: ioK8sApiCoreV1LimitRangeList
              to:
                type: Query
                field: LimitRanges
            - from: 
                type: Query
                field: ioK8sApiCoreV1PodTemplate
              to:
                type: Query
                field: PodTemplate
            - from: 
                type: Query
                field: ioK8sApiCoreV1PodTemplateList
              to:
                type: Query
                field: PodTemplates
            - from: 
                type: Query
                field: ioK8sApiCoreV1Event
              to:
                type: Query
                field: Event
            - from: 
                type: Query
                field: ioK8sApiCoreV1EventList
              to:
                type: Query
                field: Events
            - from: 
                type: Query
                field: ioK8sApiCoreV1PersistentVolumeClaim
              to:
                type: Query
                field: PersistentVolumeClaim
            - from: 
                type: Query
                field: ioK8sApiCoreV1PersistentVolumeClaimList
              to:
                type: Query
                field: PersistentVolumeClaims
            - from: 
                type: Query
                field: ioK8sApiCoreV1PersistentVolume
              to:
                type: Query
                field: PersistentVolume
            - from: 
                type: Query
                field: ioK8sApiCoreV1PersistentVolumeList
              to:
                type: Query
                field: PersistentVolumes
            - from: 
                type: Query
                field: ioK8sApiCoreV1Secret
              to:
                type: Query
                field: Secret
            - from: 
                type: Query
                field: ioK8sApiCoreV1SecretList
              to:
                type: Query
                field: Secrets
            - from: 
                type: Query
                field: ioK8sApiCoreV1ConfigMap
              to:
                type: Query
                field: ConfigMap
            - from: 
                type: Query
                field: ioK8sApiCoreV1ConfigMapList
              to:
                type: Query
                field: ConfigMaps
        # - rename:
        #     mode: wrap
        #     renames:
        #     - from: 
        #         type: Query
        #         field: ioK8sApiCoreV1EndpointsList
        #       to:
        #         type: Query
        #         field: EndpointsList
        #     - from:
        #         type: Query
        #         field: ioK8sApiCoreV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiCoreV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiRbacV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiRbacV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiStorageV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiStorageV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAdmissionregistrationV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAdmissionregistrationV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiCertificatesV1beta1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiCertificatesV1beta1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiPolicyV1beta1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiPolicyV1beta1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiextensionsApiserverPkgApisApiextensionsV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiextensionsApiserverPkgApisApiextensionsV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiSchedulingV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiSchedulingV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiNetworkingV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiNetworkingV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAppsV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAppsV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAutoscalingV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiAutoscalingV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiBatchV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiBatchV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiDiscoveryV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiDiscoveryV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiNodeV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiNodeV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiFlowcontrolV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiFlowcontrolV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiCoordinationV1(.*)List
        #       to:
        #         type: Query
        #         field: $1s
        #       useRegExpForFields: true
        #     - from:
        #         type: Query
        #         field: ioK8sApiCoordinationV1(.*)
        #       to:
        #         type: Query
        #         field: $1
        #       useRegExpForFields: true
    additionalTypeDefs: |
        interface K8sResourceInterface {
          kind: String
          apiVersion: String
          metadata: IoK8sApimachineryPkgApisMetaV1ObjectMeta
        }
        interface K8sNamespacedResourceInterface {
          namespace: Namespace
        }
        interface K8sEventOwnerInterface {
          events: EventList
        }
        extend type Node implements K8sResourceInterface
        extend type ConfigMap implements K8sResourceInterface
        extend type PersistentVolumeClaim implements K8sResourceInterface
        extend type Secret implements K8sResourceInterface
        union K8sMounted = ConfigMap | PersistentVolumeClaim | Secret
        union K8sPodParent = ReplicaSet | DaemonSet | StatefulSet | Node
        
    #     extend type Pod implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    #       parent: K8sPodParent
    #       connected: ServiceList
    #       mounting: [K8sMounted]
    #       namespace: Namespace
    #       events: EventList
    #     }
    #     extend type ReplicaSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    # #       parent: Deployment
    #       children: PodList
    # #       namespace: Namespace
    # #       events: EventList
    #     }
    #     extend type Deployment implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    #       children: ReplicaSetList
    #       namespace: Namespace
    #       events: EventList
    #     }
    #     extend type Service implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    #       connecting: PodList
    #       namespace: Namespace
    #       events: EventList
    #     }
    #     extend type DaemonSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    # #       namespace: Namespace
    # #       events: EventList
    #       children: PodList
    #     }
    #     extend type StatefulSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
    # #       namespace: Namespace
    # #       events: EventList
    #       children: PodList
    #     }

    serve:
      hostname: 0.0.0.0
      port: 3999
  example-query.graphql: |-
    query q {
      Pods(namespace: "default") {
        items {
          metadata {
            name
            namespace
            labels
          }
          parent {
            ... on ReplicaSet {
              metadata {
                name
                namespace
              }
              parent {
                metadata {
                  name
                }
              }
              children {
                items {
                  metadata {
                    name
                    labels
                  }
                }
              }
            }
          }
          connected {
            items {
              metadata {
                name
              }
            }
          }
          namespace {
            metadata {
              name
            }
          }
          mounting {
            __typename
            ... on Secret {
              metadata {name}          
            }
            ... on ConfigMap {
              metadata {
                name
                namespace
              }
            }
          }
          # events {
          #   items {
          #   	metadata {name}
          #     message
          #   }
          # }
        }
      }
      Services(namespace: "default") {
        items {
          metadata {
            name
          }
        }
      }
    }

  .meshrc2.yaml: |-
    sources:
    - name: graphqlMeshK8s
      handler:
        graphql:
          endpoint: http://mesh-svc:3999/graphql
    additionalTypeDefs: |
        extend type Pod implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          parent: K8sPodParent
          connected: ServiceList
          namespace: Namespace
          events: EventList
          mounting: [K8sMounted]
        }
        extend type Deployment implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          children: ReplicaSetList
          namespace: Namespace
          events: EventList
        }
        extend type ReplicaSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          children: PodList
          parent: Deployment
          namespace: Namespace
          events: EventList
        }
        extend type DaemonSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          children: PodList
          namespace: Namespace
          events: EventList
        }
        extend type StatefulSet implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          children: PodList
          namespace: Namespace
          events: EventList
        }
        extend type Service implements K8sNamespacedResourceInterface & K8sResourceInterface & K8sEventOwnerInterface {
          connecting: PodList
          namespace: Namespace
          events: EventList
        }
    additionalResolvers:
      - ./additional-resolvers.js
    serve:
      exampleQuery: example-query.graphql
      hostname: 0.0.0.0
      port: 4000
  additional-resolvers.js: |-
    const { print } = require('graphql');
    //const graphqlFields = require("graphql-fields");
    //const merge = require('deepmerge');

    const getReadFuncNameFromKind = kind => {
      if(!kind.includes("V1")) {
        return kind;
      }
      var head = kind.substring(0,1).toLowerCase();
      var rest = kind.substring(1);
      return getReadFuncName(head + rest);
    }
    const createParentResolver = (thisKind) => {
      var resolve = async (root, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;
        console.log("createParentResolver");
        const obj_name = root.metadata && root.metadata.name;
        var namespace = root.metadata && root.metadata.namespace;
        //var ownerReferences = root.metadata && root.metadata.ownerReferences;
        //if((!ownerReferences) ||(!ownerReferences.length) || (!namespace)) {
        //  console.log("createParentResolver", obj_name, "No ownerReferences or namespace");
        //  return null;
        //}
        const ownFunc = getReadFuncNameFromKind(thisKind);
        var _function = graphqlMeshK8s.Query[ownFunc];
        var me = await _function({ args: {name:obj_name, namespace}, context, info, selectionSet: `{metadata {name namespace ownerReferences{name kind}}}` });
        var ownerReferences = me.metadata && me.metadata.ownerReferences;
        if((!ownerReferences) ||(!ownerReferences.length) || (!namespace)) {
          console.log("createParentResolver", obj_name, "No ownerReferences or namespace");
          return null;
        }

        console.log("me: ", JSON.stringify(me))
        var name = me.metadata.ownerReferences[0].name;
        const kind = me.metadata.ownerReferences[0].kind;

        const parentFunc = getReadFuncNameFromKind(kind);
        console.log("ownerReference", name, kind, parentFunc);
        var _function = graphqlMeshK8s.Query[parentFunc];

        var value = await _function({ root, args: {name, namespace}, context, info });
        value.__typename = kind;
        return value;
      };
      var selectionSet = `{ metadata { name namespace ownerReferences { name kind }}}`;
      return { resolve, selectionSet };
    };
    const createChildrenResolver = (childFunc) => {
      var resolve = async (root, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;
        console.log("createChildrenResolver");
        var namespace = root.metadata && root.metadata.namespace;
        var name = root.metadata && root.metadata.name;
        if((!name) || (!namespace)) {
          console.log("createChildrenResolver", name, "No name or namespace")
          return { items: [] };
        }
        //console.log(name, namespace);
        //var resolverRequirements = { items: {metadata: { name: true, namespace: true, labels: true, ownerReferences: {name: true}}}};
        //var mergedFields = { fields: merge(graphqlFields(info), resolverRequirements) };
        //console.log("createChildrenResolver", JSON.stringify(mergedFields));

        var _function = graphqlMeshK8s.Query[childFunc];
        var list_ownerRef = await _function({ args: {namespace}, context, info, selectionSet: `{items {metadata{name namespace ownerReferences{name}}}}` });
        var list_objects = await _function({ args: {namespace}, context, info});
        //console.log("children base", JSON.stringify(list.items));
        var names = list_ownerRef.items.filter(elem => {
          var ownerReferences = elem.metadata && elem.metadata.ownerReferences;
          if((!ownerReferences) || (!ownerReferences.length)) {
            return false;
          }
          return name == ownerReferences[0].name;
        }).map(elem => elem.metadata.name);

        var items = list_objects.items.filter(elem => {
          return names.includes(elem.metadata && elem.metadata.name);
        });

        //console.log(list);
        return {items};
      };
      var selectionSet = `{ metadata {name namespace}}`;
      return { resolve, selectionSet };
    }
    const createConnectedResolver = (thisKind, connectedFunc) => {
      var resolve = async (obj, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;

        console.log("createConnectedResolver");
        var namespace = obj.metadata && obj.metadata.namespace;
        var name = obj.metadata && obj.metadata.name;

        const ownFunc = getReadFuncNameFromKind(thisKind);
        var _function = graphqlMeshK8s.Query[ownFunc];
        var me = await _function({ args: {name, namespace}, context, info, selectionSet: `{metadata{name labels}}` });

        var labels = me.metadata && me.metadata.labels;
        if((!labels) || (!namespace)) {
          return { items: [] };
        }

        var _function = graphqlMeshK8s.Query[connectedFunc];
        //var resolverRequirements = { items: {metadata: {name: true, namespace: true}, spec: {selector: true }}};
        //var mergedFields = { fields: merge(graphqlFields(info), resolverRequirements) };
        var list_selectors = await _function({ args: {namespace}, context, info, selectionSet: `{items{metadata{name namespace} spec {selector}}}` });
        var list_objects = await _function({ args: {namespace}, context, info});
        console.log("connected base", JSON.stringify(list_selectors.items));
        var names = list_selectors.items.filter(elem => {
          var selector = elem.spec && elem.spec.selector;
          //console.log("selector", selector);
          if(!selector) {
            return false;
          }
          return Object.keys(selector).reduce((result, key) => {
            return result && (selector[key] == labels[key])
          }, true)
        }).map(elem => elem.metadata.name);

        var items = list_objects.items.filter(elem => {
          return names.includes(elem.metadata && elem.metadata.name);
        });
        return {items};
      }
      var selectionSet = `{ metadata { name namespace labels }}`;
      return { resolve, selectionSet };
    }
    const createConnectingResolver = (listfn) => {
      var resolve = async (obj, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;

        console.log("createConnectingResolver");
        var namespace = obj.metadata && obj.metadata.namespace;
        var selector = obj.spec && obj.spec.selector;
        if((!selector) || (!namespace)) {
          console.log("createConnectingResolver FAILED: ", "selector", selector, "namespace", namespace);
          return { items: [] };
        }

        var _function = graphqlMeshK8s.Query[listfn];
        var list_selectors = await _function({ args: {namespace}, context, info, selectionSet: `{ metadata { name } spec {selector} }`});
        var list_objects = await _function({ args: {namespace}, context, info});
        console.log("connecting base", JSON.stringify(list_objects.items));
        // var list_selectors = [], list_objects = [];
        //console.log("selector", selector);
        var names = list_selectors.items.filter(elem => {
          var labels = elem.metadata.labels;
          return Object.keys(selector).reduce((result, key) => {
            return result && (selector[key] == labels[key])
          }, true)
        }).map(elem=> elem.metadata.name);
        var items = list_objects.items.filter(elem => {
          return names.includes(elem.metadata && elem.metadata.name);
        });
        return {items};
      }
      var selectionSet = `{ metadata { name namespace } spec {selector} }`;
      return { resolve, selectionSet };
    }
    const createMountingResolver = (thisKind) => {
      var resolve = async (root, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;
        
        console.log("createMountingResolver");
        var namespace = root.metadata && root.metadata.namespace;
        var name = root.metadata && root.metadata.name;

        const ownFunc = getReadFuncNameFromKind(thisKind);
        var _function = graphqlMeshK8s.Query[ownFunc];
        var me = await _function({ args: {name, namespace}, context, info, selectionSet: `{ metadata { name namespace } spec {volumes {configMap {name} persistentVolumeClaim {claimName} secret {secretName}}}}` });

        var volumes = me.spec && me.spec.volumes;
        if((!volumes) ||(!volumes.length) || (!namespace)) {
          return {items:[]};
        }
        //volumes = [];
        var items = volumes.map(async elem => {
          var __typename, name;
          if(elem.configMap) {
            __typename = "ConfigMap";
            name = elem.configMap.name;
          } else if(elem.persistentVolumeClaim) {
            __typename = "PersistentVolumeClaim";
            name = elem.persistentVolumeClaim.claimName;
          } else if(elem.secret) {
            __typename = "Secret";
            name = elem.secret.secretName;
          }
          console.log("__typename: ", __typename);
          if(__typename) {
            var rtn = await graphqlMeshK8s.Query[__typename]({args: {name , namespace}, context, info });
            return {...rtn, __typename};
          }
          return null;
        }).filter(elem => elem != null);
        return await Promise.all(items);
      };
      var selectionSet = `{ metadata { name namespace } spec {volumes {configMap {name} persistentVolumeClaim {claimName} secret {secretName}}}}`;
      return { resolve, selectionSet };
    }
    const createEventResolver = (thisKind, eventFunc) => {
      var resolve = async (obj, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;

        console.log("createEventResolver");
        var namespace = obj.metadata && obj.metadata.namespace;
        var name = obj.metadata && obj.metadata.name;

        var kind = thisKind;
        if((!name) /*|| (!kind)*/ || (!namespace)) {
          return { items: [] };
        }
        //const resolverRequirements = { items: { metadata: {name: true, namespace: true}, involvedObject: { kind: true, name: true }}};
        //const mergedFields = { fields: merge(graphqlFields(info), resolverRequirements) };
        const events_involved = await graphqlMeshK8s.Query[eventFunc]({ args: {namespace}, context, info, selectionSet: `{items{metadata{name namespace} involvedObject{kind name}}}` });
        const events = await graphqlMeshK8s.Query[eventFunc]({ args: {namespace}, context, info });
        var names = events_involved.items.filter(elem => {
          var involvedObject = elem.involvedObject;
          //console.log(involvedObject);
          return (involvedObject.name == name) && (involvedObject.kind == kind);
        }).map(elem => elem.metadata.name);

        var items = events.items.filter(elem => {
          return names.includes(elem.metadata && elem.metadata.name);
        });
        return {items};
      };
      var selectionSet = `{ kind metadata { namespace name }}`;
      return { resolve, selectionSet };
    }
    const createNamespaceResolver = (namespaceFunc) => {
      var resolve = async (obj, args, context, info) => {
        graphqlMeshK8s = context.graphqlMeshK8s;
        console.log("createNamespaceResolver");
        var namespace = obj.metadata && obj.metadata.namespace;
        if(!namespace) {
          return [];
        }
        return await graphqlMeshK8s.Query[namespaceFunc]({ args: {name: namespace}, context, info });
      };
      var selectionSet = `{ metadata { namespace }}`;
      return { resolve, selectionSet };
    }

    const resolvers = {
      Pod: {
        //parentReplicaSet: createParentResolver("ReplicaSet"),
        //parentDaemonSet: createParentResolver("DaemonSet"),
        //parentStatefulSet: createParentResolver("StatefulSet"),
        parent: createParentResolver("Pod"),
        connected: createConnectedResolver("Pod", "Services"),
        namespace: createNamespaceResolver("Namespace"),
        events: createEventResolver("Pod", "listCoreV1NamespacedEvent"),
        mounting: createMountingResolver("Pod")
      },
      ReplicaSet: {
        parent: createParentResolver("ReplicaSet"),
        children: createChildrenResolver("Pods"),
        namespace: createNamespaceResolver("Namespace"),
        events: createEventResolver("ReplicaSet", "listCoreV1NamespacedEvent")
      },
      Deployment: {
        children: createChildrenResolver("ReplicaSets"),
        namespace: createNamespaceResolver("Namespace"),
        events: createEventResolver("Deployment", "listCoreV1NamespacedEvent")
      },
      DaemonSet: {
        children: createChildrenResolver("Pods"),
        namespace: createNamespaceResolver("Namespace"),
        events: createEventResolver("DaemonSet", "listCoreV1NamespacedEvent")
      },
      StatefulSet: {
        children: createChildrenResolver("Pods"),
        namespace: createNamespaceResolver("Namespace"),
        events: createEventResolver("StatefulSet", "listCoreV1NamespacedEvent")
      },
      K8sPodParent: {
        __resolveType(obj, context, info){
          console.log("obj:", JSON.stringify(obj));
          return obj.__typename;
        }
      },
      Service: {
        connecting: createConnectingResolver("Pods")
      },
      K8sMounted: {
        __resolveType(obj, context, info){
          return obj.__typename;
        }
      },
      Node: {
      }
    };
    module.exports = { resolvers };
